---
layout: "base"
og:
  template: "title"
  deck: "Blog"
---

{% html "head" %}
<meta property="og:url" content="https://jameslittle.me{{page.url}}">
<meta property="og:type" content="website">
<meta property="og:title" content="{{title}}">
<meta property="og:description" content="{{page.blurb}}">
<meta property="og:site_name" content="jameslittle.me">
<meta property="og:locale" content="en_US">
<meta property="article:author" content="James Little">
{% endhtml %}

{% set previousPost = collections.blog | getPreviousCollectionItem %}
{% set nextPost = collections.blog | getNextCollectionItem %}

<div class="blog-post-meta">
  <h1>{{ title }}</h1>
  <div class="date">{{ date | readableDate }}</div>
  {% if outdated %}
  <p class="outdated"><strong>This post is outdated. </strong>{{outdated}}</p>
  {% endif %}
  {% if draft %}
  <p class="outdated"><strong>This post is a draft.</strong> It hasn't been published yet!</p>
  {% endif %}
</div>

<div class="blog-post-content">
  {{ content | safe }}
</div>

<aside class="blog-post-aside">
  <p>I'm James Little, a software engineer and design enthusiast based outside of Boston. I work at Stripe on their
    documentation web team.</p>
  <div>{% if previousPost %}Next: <a href="{{ previousPost.url }}">{{ previousPost.data.title }}</a>{% endif %}</div>
  <div>{% if nextPost %}Prev: <a href="{{ nextPost.url }}">{{ nextPost.data.title }}</a>{% endif %}</div>
</aside>

{% html "foot" %}
<script>
  // There are no const or let statements in the script because the 11ty
  // live-reloader reruns every script block on every change, and we'd run
  // into variable redeclaration errors.
  r = (e) => e.getBoundingClientRect();
  px = (num) => `${num}px`;
  article = document.querySelector("article");
  overlap = (a, b) => !!a && !!b && a !== b && !(r(a).bottom < r(b).top || r(a).top > r(b).bottom)
  positionFootnotes = () => {
    prev_footnote = null;
    document.querySelectorAll(".footnote-marker").forEach(function (el) {
      const footnoteContent = document.getElementById(el.dataset.contentId);
      footnoteContent.style.left = px(r(footnoteContent).width * -1 - 16);
      footnoteContent.style.top = px(r(el).top - r(article).top);

      if (prev_footnote && overlap(footnoteContent, prev_footnote)) {
        footnoteContent.style.top = px(r(prev_footnote).bottom - r(article).top + 12);
      }

      footnoteContent.addEventListener("mouseover", () => {
        el.classList.add("hover");
      });

      footnoteContent.addEventListener("mouseout", () => {
        el.classList.remove("hover");
      });

      prev_footnote = footnoteContent;
    });
  };

  addEventListener("load", positionFootnotes);
  positionFootnotes();
</script>
{% endhtml %}
